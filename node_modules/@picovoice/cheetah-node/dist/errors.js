//
// Copyright 2022-2023 Picovoice Inc.
//
// You may not use this file except in compliance with the license. A copy of the license is located in the "LICENSE"
// file accompanying this source.
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.pvStatusToException = exports.CheetahActivationRefusedError = exports.CheetahActivationThrottledError = exports.CheetahActivationLimitReachedError = exports.CheetahActivationError = exports.CheetahRuntimeError = exports.CheetahInvalidStateError = exports.CheetahKeyError = exports.CheetahStopIterationError = exports.CheetahInvalidArgumentError = exports.CheetahIOError = exports.CheetahOutOfMemoryError = exports.CheetahError = void 0;
const pv_status_t_1 = require("./pv_status_t");
class CheetahError extends Error {
    _message;
    _messageStack;
    constructor(message, messageStack = []) {
        super(CheetahError.errorToString(message, messageStack));
        this._message = message;
        this._messageStack = messageStack;
    }
    get message() {
        return this._message;
    }
    get messageStack() {
        return this._messageStack;
    }
    static errorToString(initial, messageStack) {
        let msg = initial;
        if (messageStack.length > 0) {
            msg += `: ${messageStack.reduce((acc, value, index) => acc + '\n  [' + index + '] ' + value, '')}`;
        }
        return msg;
    }
}
exports.CheetahError = CheetahError;
class CheetahOutOfMemoryError extends CheetahError {
}
exports.CheetahOutOfMemoryError = CheetahOutOfMemoryError;
class CheetahIOError extends CheetahError {
}
exports.CheetahIOError = CheetahIOError;
class CheetahInvalidArgumentError extends CheetahError {
}
exports.CheetahInvalidArgumentError = CheetahInvalidArgumentError;
class CheetahStopIterationError extends CheetahError {
}
exports.CheetahStopIterationError = CheetahStopIterationError;
class CheetahKeyError extends CheetahError {
}
exports.CheetahKeyError = CheetahKeyError;
class CheetahInvalidStateError extends CheetahError {
}
exports.CheetahInvalidStateError = CheetahInvalidStateError;
class CheetahRuntimeError extends CheetahError {
}
exports.CheetahRuntimeError = CheetahRuntimeError;
class CheetahActivationError extends CheetahError {
}
exports.CheetahActivationError = CheetahActivationError;
class CheetahActivationLimitReachedError extends CheetahError {
}
exports.CheetahActivationLimitReachedError = CheetahActivationLimitReachedError;
class CheetahActivationThrottledError extends CheetahError {
}
exports.CheetahActivationThrottledError = CheetahActivationThrottledError;
class CheetahActivationRefusedError extends CheetahError {
}
exports.CheetahActivationRefusedError = CheetahActivationRefusedError;
function pvStatusToException(pvStatus, errorMessage, messageStack = []) {
    switch (pvStatus) {
        case pv_status_t_1.default.OUT_OF_MEMORY:
            throw new CheetahOutOfMemoryError(errorMessage, messageStack);
        case pv_status_t_1.default.IO_ERROR:
            throw new CheetahIOError(errorMessage, messageStack);
        case pv_status_t_1.default.INVALID_ARGUMENT:
            throw new CheetahInvalidArgumentError(errorMessage, messageStack);
        case pv_status_t_1.default.STOP_ITERATION:
            throw new CheetahStopIterationError(errorMessage, messageStack);
        case pv_status_t_1.default.KEY_ERROR:
            throw new CheetahKeyError(errorMessage, messageStack);
        case pv_status_t_1.default.INVALID_STATE:
            throw new CheetahInvalidStateError(errorMessage, messageStack);
        case pv_status_t_1.default.RUNTIME_ERROR:
            throw new CheetahRuntimeError(errorMessage, messageStack);
        case pv_status_t_1.default.ACTIVATION_ERROR:
            throw new CheetahActivationError(errorMessage, messageStack);
        case pv_status_t_1.default.ACTIVATION_LIMIT_REACHED:
            throw new CheetahActivationLimitReachedError(errorMessage, messageStack);
        case pv_status_t_1.default.ACTIVATION_THROTTLED:
            throw new CheetahActivationThrottledError(errorMessage, messageStack);
        case pv_status_t_1.default.ACTIVATION_REFUSED:
            throw new CheetahActivationRefusedError(errorMessage, messageStack);
        default:
            // eslint-disable-next-line no-console
            console.warn(`Unmapped error code: ${pvStatus}`);
            throw new CheetahError(errorMessage, messageStack);
    }
}
exports.pvStatusToException = pvStatusToException;
//# sourceMappingURL=errors.js.map