// Generated by CoffeeScript 1.6.3
/*
  pico is dscape/nano's little brother
  (c) 2012 Stephane Alnet
*/


(function() {
  var byline, pico, pico_request, pico_request_test, request,
    __slice = [].slice;

  request = require('request');

  byline = require('byline');

  pico_request = function(base_uri) {
    var def, prefix, result;
    prefix = function(uri) {
      return base_uri + ((uri != null) && uri !== '' ? '/' + uri : '');
    };
    def = function(method) {
      return function() {
        var args, callback, options, uri;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (args.length > 0 && typeof args[0] === 'string') {
          uri = args.shift();
        }
        if (args.length > 0 && typeof args[0] === 'object') {
          options = args.shift();
        }
        if (args.length > 0 && typeof args[0] === 'function') {
          callback = args.shift();
        }
        if (args.length > 0) {
          throw new Error("Unexpected " + (typeof args[0]) + " parameter");
        }
        if (options == null) {
          options = {};
        }
        if (uri == null) {
          uri = options.uri;
        }
        if (uri != null) {
          options.uri = prefix(uri);
        } else {
          options.uri = prefix('');
        }
        if (callback != null) {
          options.callback = callback;
        }
        return method(options);
      };
    };
    result = def(request);
    result.get = def(request.get);
    result.post = def(request.post);
    result.put = def(request.put);
    result.head = def(request.head);
    result.del = def(request.del);
    result.prefix = prefix;
    return result;
  };

  pico = function(base_uri, user, pass) {
    var couch_cb, head_cb, monit_handler, parsed, qs, result, url, user_id;
    if (user != null) {
      if (pass == null) {
        pass = '';
      }
      url = require('url');
      parsed = url.parse(base_uri);
      parsed.auth = [user, pass].join(':');
      delete parsed.href;
      delete parsed.host;
      base_uri = url.format(parsed);
    }
    qs = require('querystring');
    couch_cb = function(callback) {
      if (callback) {
        return function(e, r, b) {
          var _ref;
          if (e) {
            return callback(e, r, b);
          }
          if ((200 <= (_ref = r.statusCode) && _ref < 300)) {
            return callback(e, r, b);
          } else {
            e = {
              status: r.statusCode
            };
            return callback(e, r);
          }
        };
      }
    };
    head_cb = function(callback) {
      if (callback) {
        return couch_cb(function(e, r, b) {
          var _ref, _ref1;
          if (e) {
            return callback(e, r);
          } else {
            return callback(e, r, {
              ok: true,
              rev: r != null ? (_ref = r.headers) != null ? (_ref1 = _ref.etag) != null ? _ref1.replace(/"/g, '') : void 0 : void 0 : void 0
            });
          }
        });
      }
    };
    result = {};
    result.request = pico_request(base_uri);
    result.create = function() {
      var _ref;
      return (_ref = result.request).put.apply(_ref, arguments);
    };
    result.destroy = function() {
      var _ref;
      return (_ref = result.request).del.apply(_ref, arguments);
    };
    user_id = function(name) {
      return 'org.couchdb.user:' + name;
    };
    result.get = function(id, options, callback) {
      var _ref;
      if (typeof options === 'function' && (callback == null)) {
        _ref = [{}, options], options = _ref[0], callback = _ref[1];
      }
      if (options == null) {
        options = {};
      }
      options.uri = qs.escape(id);
      options.json = true;
      return this.request.get(options, couch_cb(callback));
    };
    result.get_user = function() {
      var args, name;
      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this.get.apply(this, [user_id(name)].concat(__slice.call(args)));
    };
    result.rev = function(id, options, callback) {
      var _ref;
      if (typeof options === 'function' && (callback == null)) {
        _ref = [{}, options], options = _ref[0], callback = _ref[1];
      }
      if (options == null) {
        options = {};
      }
      options.uri = qs.escape(id);
      return this.request.head(options, head_cb(callback));
    };
    result.rev_user = function() {
      var args, name;
      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this.rev.apply(this, [user_id(name)].concat(__slice.call(args)));
    };
    result.put = function(doc, options, callback) {
      var _ref;
      if (typeof options === 'function' && (callback == null)) {
        _ref = [{}, options], options = _ref[0], callback = _ref[1];
      }
      if (options == null) {
        options = {};
      }
      options.uri = qs.escape(doc._id);
      if (doc._rev != null) {
        if (options.qs == null) {
          options.qs = {};
        }
        options.qs.rev = doc._rev;
      }
      options.json = doc;
      return this.request.put(options, couch_cb(callback));
    };
    result.put_user = function() {
      var args, doc;
      doc = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (doc._id == null) {
        doc._id = user_id(doc.name);
      }
      if (doc.type == null) {
        doc.type = 'user';
      }
      if (doc.roles == null) {
        doc.roles = [];
      }
      return this.put.apply(this, [doc].concat(__slice.call(args)));
    };
    result.remove = function(doc, options, callback) {
      var _ref;
      if (typeof options === 'function' && (callback == null)) {
        _ref = [{}, options], options = _ref[0], callback = _ref[1];
      }
      if (options == null) {
        options = {};
      }
      options.uri = qs.escape(doc._id);
      if (options.qs == null) {
        options.qs = {};
      }
      options.qs.rev = doc._rev;
      options.json = true;
      return this.request.del(options, couch_cb(callback));
    };
    result.view = function(design, view, options, callback) {
      var _ref;
      if (typeof options === 'function' && (callback == null)) {
        _ref = [{}, options], options = _ref[0], callback = _ref[1];
      }
      if (options == null) {
        options = {};
      }
      options.uri = '_design/' + qs.escape(design) + '/_view/' + qs.escape(view);
      options.json = true;
      return this.request.get(options, couch_cb(callback));
    };
    monit_handler = function(params, callback) {
      var k, options, query, stream, v, _ref,
        _this = this;
      query = {
        feed: 'continuous',
        heartbeat: 10000,
        include_docs: true,
        style: 'main_only'
      };
      if (params.filter_name != null) {
        query.filter = params.filter_name;
      }
      if (params.since != null) {
        query.since = params.since;
      }
      if (params.filter_params != null) {
        _ref = params.filter_params;
        for (k in _ref) {
          v = _ref[k];
          query[k] = v;
        }
      }
      options = {
        uri: '_changes?' + qs.stringify(query),
        jar: false,
        json: true
      };
      stream = this.request.get(options, function(e) {
        if (e != null) {
          return console.log(e);
        }
      });
      options = void 0;
      stream = byline(stream);
      stream.on('end', function() {
        stream = void 0;
        result.monitor(params, callback);
      });
      stream.on('data', function(line) {
        var p;
        try {
          p = JSON.parse(line);
        } catch (_error) {}
        if ((p != null ? p.doc : void 0) != null) {
          callback(p.doc);
          if (params.since_name != null) {
            _this.request.get("_local/" + params.since_name, {
              json: true
            }, function(e, r, t) {
              var q;
              q = {
                _id: "_local/" + params.since_name,
                since: p.seq
              };
              if (t != null) {
                q._rev = t._rev;
              }
              return _this.request.put("_local/" + params.since_name, {
                json: q
              }, function(e, r, t) {
                if (e != null) {
                  return console.log(e);
                }
              });
            });
          }
        }
        if ((p != null ? p.error : void 0) != null) {
          console.log("monitor: " + JSON.stringify(p));
        }
      });
    };
    result.monitor = function(params, callback) {
      var args, _ref,
        _this = this;
      args = arguments;
      if (typeof params === 'function' && (callback == null)) {
        _ref = [{}, params], params = _ref[0], callback = _ref[1];
      }
      if (params.since_name != null) {
        this.request.get("_local/" + params.since_name, {
          json: true
        }, function(e, r, p) {
          if ((p != null ? p.since : void 0) != null) {
            params.since = p.since;
          }
          return monit_handler.apply(_this, [params, callback]);
        });
      } else {
        monit_handler.apply(this, [params, callback]);
      }
    };
    result.compact = function(cb) {
      if (cb == null) {
        cb = pico.log;
      }
      return this.request.post('_compact', {
        json: {}
      }, cb);
    };
    result.compact_design = function(design, cb) {
      var _this = this;
      if (cb == null) {
        cb = pico.log;
      }
      return this.request.post('_view_cleanup', {
        json: {}
      }, function(e) {
        if (e) {
          return cb(e);
        }
        return _this.request.post("_compact/" + (qs.escape(design)), {
          json: {}
        }, cb);
      });
    };
    return result;
  };

  module.exports = pico;

  pico.request = pico_request;

  pico.replicate = require('./replicate');

  pico._log = console.log;

  pico.log = function(e, r, b) {
    if (e != null) {
      return pico._log(e);
    } else {
      if (b == null) {
        return pico.log('Missing body');
      } else {
        if (!b.ok) {
          return pico._log(b);
        }
      }
    }
  };

  pico_request_test = function(object) {
    var assert, attempts, conclude, debug, http, method_server;
    assert = require('assert');
    assert.strictEqual(typeof object, 'function', "not a function");
    assert.strictEqual(typeof object('http://example.net'), 'function', "does not return a function");
    assert.strictEqual(typeof object('http://example.net').prefix, 'function', "prefix is not a function");
    assert.strictEqual(object('http://example.net').prefix(''), 'http://example.net');
    assert.strictEqual(object('http://example.net').prefix('foo'), 'http://example.net/foo');
    assert.strictEqual(typeof object('http://example.net').get, 'function', "get is not a function");
    assert.strictEqual(typeof object('http://example.net').post, 'function', "post is not a function");
    assert.strictEqual(typeof object('http://example.net').put, 'function', "put is not a function");
    assert.strictEqual(typeof object('http://example.net').head, 'function', "head is not a function");
    assert.strictEqual(typeof object('http://example.net').del, 'function', "del is not a function");
    debug = false;
    http = require('http');
    method_server = http.createServer(function(req, res) {
      if (debug) {
        console.dir(arguments);
      }
      if (req.method !== 'HEAD') {
        return res.end(req.method);
      } else {
        return res.end('');
      }
    });
    method_server.listen(1337, '127.0.0.1');
    attempts = 5;
    conclude = function() {
      attempts--;
      if (attempts === 0) {
        return method_server.close();
      }
    };
    object('http://127.0.0.1:1337').get('foo', function(e, r, b) {
      assert.strictEqual(b, 'GET', "GET method failed");
      return conclude();
    });
    object('http://127.0.0.1:1337').post('foo', function(e, r, b) {
      assert.strictEqual(b, 'POST', "POST method failed");
      return conclude();
    });
    object('http://127.0.0.1:1337').put('foo', function(e, r, b) {
      assert.strictEqual(b, 'PUT', "PUT method failed");
      return conclude();
    });
    object('http://127.0.0.1:1337').del('foo', function(e, r, b) {
      assert.strictEqual(b, 'DELETE', "DELETE method failed");
      return conclude();
    });
    object('http://127.0.0.1:1337').head('foo', function(e, r, b) {
      assert.strictEqual(b, '', "HEAD method failed");
      return conclude();
    });
    object('http://127.0.0.1:1337').get(function(e, r, b) {
      assert.strictEqual(b, 'GET', "short GET method failed");
      return conclude();
    });
    object('http://127.0.0.1:1337').post(function(e, r, b) {
      assert.strictEqual(b, 'POST', "short POST method failed");
      return conclude();
    });
    object('http://127.0.0.1:1337').put(function(e, r, b) {
      assert.strictEqual(b, 'PUT', "short PUT method failed");
      return conclude();
    });
    object('http://127.0.0.1:1337').del(function(e, r, b) {
      assert.strictEqual(b, 'DELETE', "short DELETE method failed");
      return conclude();
    });
    return object('http://127.0.0.1:1337').head(function(e, r, b) {
      assert.strictEqual(b, void 0, "short HEAD method failed");
      return conclude();
    });
  };

  pico.request.test = function() {
    console.log("Starting pico_request tests");
    return pico_request_test(pico_request);
  };

  pico.test = function() {
    var assert, db, object;
    object = pico;
    assert = require('assert');
    console.log("Starting pico.request tests");
    pico_request_test(object.request);
    console.log("Starting pico tests");
    assert.strictEqual(typeof object('http://example.net').get, 'function', "get is not a function");
    assert.strictEqual(typeof object('http://example.net').put, 'function', "put is not a function");
    assert.strictEqual(typeof object('http://example.net').rev, 'function', "rev is not a function");
    assert.strictEqual(typeof object('http://example.net').remove, 'function', "remove is not a function");
    assert.strictEqual(typeof object('http://example.net').view, 'function', "view is not a function");
    assert.strictEqual(typeof object('http://example.net').monitor, 'function', "monitor is not a function");
    db = pico('http://127.0.0.1:15984/foo');
    return db.destroy(function(e, r, b) {
      return db.create(function(e) {
        assert.strictEqual(e, null);
        return db.put({
          _id: 'foo',
          bar: 'babar'
        }, function(e) {
          assert.strictEqual(e, null);
          return db.get('foo', function(e, r, b) {
            assert.strictEqual(e, null);
            assert.strictEqual(b.bar, 'babar');
            return db.destroy(function(e) {
              assert.strictEqual(e, null);
              return console.log('Done.');
            });
          });
        });
      });
    });
  };

}).call(this);
